#!/usr/bin/python
from optparse import OptionParser, make_option
import sys
import dbus

bus = dbus.SystemBus()

option_list = [ make_option("-p", "--path", action="store", type="string", dest="path"), ]
parser = OptionParser(option_list=option_list)

(options, args) = parser.parse_args()

if (len(args) < 1):
        print("Usage: %s <command>" % (sys.argv[0]))
        print("")
        print("  info")
        print("  powered [on/off]")
        print("  add [Address] [Name] [Id]")
        print("  remove [device path]")
        sys.exit(1)

cmd = args[0]
if (options.path):
	path = options.path
else:
	path = "/nrf0"

props = dbus.Interface(bus.get_object("br.org.cesar.knot.nrf", path), "org.freedesktop.DBus.Properties")
adapter = dbus.Interface(bus.get_object("br.org.cesar.knot.nrf", path), "br.org.cesar.knot.nrf.Adapter1")

if (cmd == "info"):
	print (props.GetAll("br.org.cesar.knot.nrf.Adapter1"))
	sys.exit(0)

if (cmd == "powered"):
	print ("powered ...")
	powered1 = props.Get("br.org.cesar.knot.nrf.Adapter1", "Powered")
	if (len(args) < 2):
		print("  Powered: %d" % powered1)
	else:
		if (args[1] == "on"):
			value = dbus.Boolean(1)
		else:
			value = dbus.Boolean(0)

		props.Set("br.org.cesar.knot.nrf.Adapter1", "Powered", value)
		powered2 = props.Get("br.org.cesar.knot.nrf.Adapter1", "Powered")
		print ("  Powered: %d > %d" % (powered1, powered2))

	sys.exit(0)

if (cmd == "add"):
        print ("Adding device:")
        print ("  Address:  %s" % args[1])
        print ("  Name:  %s" % args[2])
        print ("  Id:  %s" % args[3])
        mac_addr = dbus.String(args[1])
        name = dbus.String(args[2])
        device_id = dbus.UInt64(args[3])
        device_dict = dict()
        device_dict.update({"Address": mac_addr})
        device_dict.update({"Name": name})
        device_dict.update({"Id": device_id})
        dbus_dict = dbus.Dictionary(device_dict, signature='sv')
        print (adapter.AddDevice(dbus_dict))
        sys.exit(0)

if (cmd == "remove"):
	print ("Removing device %s" % args[1])
	devpath = dbus.ObjectPath(args[1])
	print (adapter.RemoveDevice(devpath))
	sys.exit(0)
